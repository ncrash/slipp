/*
 * This build file was auto generated by running the Gradle 'buildSetup' task
 * by 'ncrash' at '13. 11. 14 오전 8:44' with Gradle 1.8
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/1.8/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'eclipse'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'maven central' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

ext {
    javaVersion = '1.6'
    
	slf4jVersion = '1.7.5'
	logbackVersion = '1.0.13'
	jsoupVersion = '1.7.2'
	
	junitVersion = '4.11'
}

List loggers = [
    "org.slf4j:slf4j-api:${slf4jVersion}",
    "org.slf4j:jcl-over-slf4j:${slf4jVersion}",
    "org.slf4j:log4j-over-slf4j:${slf4jVersion}",
    "org.slf4j:jul-to-slf4j:${slf4jVersion}",
    "ch.qos.logback:logback-core:${logbackVersion}",
    "ch.qos.logback:logback-classic:${logbackVersion}"
]

buildDir = 'build'
 
sourceCompatibility = javaVersion
targetCompatibility = javaVersion
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

// In this section you declare the dependencies for your production and test code
dependencies {
	compile loggers
	
	compile "org.jsoup:jsoup:${jsoupVersion}"
	
    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile "junit:junit:${junitVersion}"
}

// commons-logging, log4j, jul 의존성 제거
configurations {
    all.collect { configuration ->
        configuration.exclude group: 'commons-logging', module: 'commons-logging'
        configuration.exclude group: 'log4j', module: 'log4j'
        configuration.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        configuration.exclude group: 'org.slf4j', module: 'slf4j-jcl'
        configuration.exclude group: 'org.slf4j', module: 'slf4j-jdk14'
    }
}

task initProject << {
        createDir = {
                it.mkdirs();
        }
        
        sourceSets*.java.srcDirs*.each createDir
        sourceSets*.resources.srcDirs*.each createDir

        processResources {
                from(sourceSets.main.resources.srcDirs) {
                }
        }
}

eclipse {
        classpath {
                downloadSources=true
                defaultOutputDir = file("${buildDir}/classes/main")
        }

        jdt {
                file {
                        withProperties { 
                                properties -> properties.setProperty("encoding//src/main/java", "utf-8")
                                              properties.setProperty("encoding//src/main/resources", "utf-8")
                                              properties.setProperty("encoding//src/test/java", "utf-8")
                                              properties.setProperty("encoding//src/test/resources", "utf-8")
                                                  //properties.setProperty("encoding//src/main/generated", "utf-8")
                        }                
                }
        }
}

eclipseJdt << {
    File f = file('.settings/org.eclipse.core.resources.prefs')
    f.write('eclipse.preferences.version=1\n')
    f.append('encoding/<project>=utf-8')
}

tasks.eclipse.dependsOn cleanEclipse
tasks.eclipse.dependsOn initProject